// Generated by gencpp from file kkanbu_msgs/C_Obstacles.msg
// DO NOT EDIT!


#ifndef KKANBU_MSGS_MESSAGE_C_OBSTACLES_H
#define KKANBU_MSGS_MESSAGE_C_OBSTACLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kkanbu_msgs/C_Obstacle.h>

namespace kkanbu_msgs
{
template <class ContainerAllocator>
struct C_Obstacles_
{
  typedef C_Obstacles_<ContainerAllocator> Type;

  C_Obstacles_()
    : camera_obstacle()  {
    }
  C_Obstacles_(const ContainerAllocator& _alloc)
    : camera_obstacle(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >::other >  _camera_obstacle_type;
  _camera_obstacle_type camera_obstacle;





  typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> const> ConstPtr;

}; // struct C_Obstacles_

typedef ::kkanbu_msgs::C_Obstacles_<std::allocator<void> > C_Obstacles;

typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacles > C_ObstaclesPtr;
typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacles const> C_ObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator2> & rhs)
{
  return lhs.camera_obstacle == rhs.camera_obstacle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kkanbu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5642af538089baa9f16e54d156a84b50";
  }

  static const char* value(const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5642af538089baa9ULL;
  static const uint64_t static_value2 = 0xf16e54d156a84b50ULL;
};

template<class ContainerAllocator>
struct DataType< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kkanbu_msgs/C_Obstacles";
  }

  static const char* value(const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kkanbu_msgs/C_Obstacle[] camera_obstacle\n"
"\n"
"================================================================================\n"
"MSG: kkanbu_msgs/C_Obstacle\n"
"float64 angle\n"
"float64 width\n"
"float64 distance\n"
"string name\n"
;
  }

  static const char* value(const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera_obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct C_Obstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kkanbu_msgs::C_Obstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kkanbu_msgs::C_Obstacles_<ContainerAllocator>& v)
  {
    s << indent << "camera_obstacle[]" << std::endl;
    for (size_t i = 0; i < v.camera_obstacle.size(); ++i)
    {
      s << indent << "  camera_obstacle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.camera_obstacle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KKANBU_MSGS_MESSAGE_C_OBSTACLES_H
