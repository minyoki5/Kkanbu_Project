// Generated by gencpp from file kkanbu_msgs/LocalPathArray.msg
// DO NOT EDIT!


#ifndef KKANBU_MSGS_MESSAGE_LOCALPATHARRAY_H
#define KKANBU_MSGS_MESSAGE_LOCALPATHARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>

namespace kkanbu_msgs
{
template <class ContainerAllocator>
struct LocalPathArray_
{
  typedef LocalPathArray_<ContainerAllocator> Type;

  LocalPathArray_()
    : local_paths()
    , collision_a()  {
    }
  LocalPathArray_(const ContainerAllocator& _alloc)
    : local_paths(_alloc)
    , collision_a(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::nav_msgs::Path_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nav_msgs::Path_<ContainerAllocator> >::other >  _local_paths_type;
  _local_paths_type local_paths;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _collision_a_type;
  _collision_a_type collision_a;





  typedef boost::shared_ptr< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> const> ConstPtr;

}; // struct LocalPathArray_

typedef ::kkanbu_msgs::LocalPathArray_<std::allocator<void> > LocalPathArray;

typedef boost::shared_ptr< ::kkanbu_msgs::LocalPathArray > LocalPathArrayPtr;
typedef boost::shared_ptr< ::kkanbu_msgs::LocalPathArray const> LocalPathArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator2> & rhs)
{
  return lhs.local_paths == rhs.local_paths &&
    lhs.collision_a == rhs.collision_a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kkanbu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0b308c9bef08f15a4ea70121d79659d";
  }

  static const char* value(const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0b308c9bef08f15ULL;
  static const uint64_t static_value2 = 0xa4ea70121d79659dULL;
};

template<class ContainerAllocator>
struct DataType< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kkanbu_msgs/LocalPathArray";
  }

  static const char* value(const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_msgs/Path[] local_paths\n"
"bool[] collision_a\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.local_paths);
      stream.next(m.collision_a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalPathArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kkanbu_msgs::LocalPathArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kkanbu_msgs::LocalPathArray_<ContainerAllocator>& v)
  {
    s << indent << "local_paths[]" << std::endl;
    for (size_t i = 0; i < v.local_paths.size(); ++i)
    {
      s << indent << "  local_paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "    ", v.local_paths[i]);
    }
    s << indent << "collision_a[]" << std::endl;
    for (size_t i = 0; i < v.collision_a.size(); ++i)
    {
      s << indent << "  collision_a[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.collision_a[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KKANBU_MSGS_MESSAGE_LOCALPATHARRAY_H
