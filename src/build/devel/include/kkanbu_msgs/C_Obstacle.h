// Generated by gencpp from file kkanbu_msgs/C_Obstacle.msg
// DO NOT EDIT!


#ifndef KKANBU_MSGS_MESSAGE_C_OBSTACLE_H
#define KKANBU_MSGS_MESSAGE_C_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kkanbu_msgs
{
template <class ContainerAllocator>
struct C_Obstacle_
{
  typedef C_Obstacle_<ContainerAllocator> Type;

  C_Obstacle_()
    : angle(0.0)
    , width(0.0)
    , distance(0.0)
    , name()  {
    }
  C_Obstacle_(const ContainerAllocator& _alloc)
    : angle(0.0)
    , width(0.0)
    , distance(0.0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef double _angle_type;
  _angle_type angle;

   typedef double _width_type;
  _width_type width;

   typedef double _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct C_Obstacle_

typedef ::kkanbu_msgs::C_Obstacle_<std::allocator<void> > C_Obstacle;

typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacle > C_ObstaclePtr;
typedef boost::shared_ptr< ::kkanbu_msgs::C_Obstacle const> C_ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.width == rhs.width &&
    lhs.distance == rhs.distance &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kkanbu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "053445bdb8cb0f34db3951850719d3b0";
  }

  static const char* value(const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x053445bdb8cb0f34ULL;
  static const uint64_t static_value2 = 0xdb3951850719d3b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kkanbu_msgs/C_Obstacle";
  }

  static const char* value(const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angle\n"
"float64 width\n"
"float64 distance\n"
"string name\n"
;
  }

  static const char* value(const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.width);
      stream.next(m.distance);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct C_Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kkanbu_msgs::C_Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kkanbu_msgs::C_Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KKANBU_MSGS_MESSAGE_C_OBSTACLE_H
