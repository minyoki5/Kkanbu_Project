// Generated by gencpp from file kkanbu_msgs/SensorPointArray.msg
// DO NOT EDIT!


#ifndef KKANBU_MSGS_MESSAGE_SENSORPOINTARRAY_H
#define KKANBU_MSGS_MESSAGE_SENSORPOINTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kkanbu_msgs/SensorPoint.h>

namespace kkanbu_msgs
{
template <class ContainerAllocator>
struct SensorPointArray_
{
  typedef SensorPointArray_<ContainerAllocator> Type;

  SensorPointArray_()
    : obs_info()  {
    }
  SensorPointArray_(const ContainerAllocator& _alloc)
    : obs_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >::other >  _obs_info_type;
  _obs_info_type obs_info;





  typedef boost::shared_ptr< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> const> ConstPtr;

}; // struct SensorPointArray_

typedef ::kkanbu_msgs::SensorPointArray_<std::allocator<void> > SensorPointArray;

typedef boost::shared_ptr< ::kkanbu_msgs::SensorPointArray > SensorPointArrayPtr;
typedef boost::shared_ptr< ::kkanbu_msgs::SensorPointArray const> SensorPointArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator2> & rhs)
{
  return lhs.obs_info == rhs.obs_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kkanbu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5907528083b582d6aa61200010c67a24";
  }

  static const char* value(const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5907528083b582d6ULL;
  static const uint64_t static_value2 = 0xaa61200010c67a24ULL;
};

template<class ContainerAllocator>
struct DataType< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kkanbu_msgs/SensorPointArray";
  }

  static const char* value(const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SensorPoint[] obs_info\n"
"================================================================================\n"
"MSG: kkanbu_msgs/SensorPoint\n"
"float64 x\n"
"float64 y\n"
"float64 r\n"
"bool mode\n"
;
  }

  static const char* value(const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obs_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorPointArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kkanbu_msgs::SensorPointArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kkanbu_msgs::SensorPointArray_<ContainerAllocator>& v)
  {
    s << indent << "obs_info[]" << std::endl;
    for (size_t i = 0; i < v.obs_info.size(); ++i)
    {
      s << indent << "  obs_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.obs_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KKANBU_MSGS_MESSAGE_SENSORPOINTARRAY_H
