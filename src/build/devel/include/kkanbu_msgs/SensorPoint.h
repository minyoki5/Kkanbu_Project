// Generated by gencpp from file kkanbu_msgs/SensorPoint.msg
// DO NOT EDIT!


#ifndef KKANBU_MSGS_MESSAGE_SENSORPOINT_H
#define KKANBU_MSGS_MESSAGE_SENSORPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kkanbu_msgs
{
template <class ContainerAllocator>
struct SensorPoint_
{
  typedef SensorPoint_<ContainerAllocator> Type;

  SensorPoint_()
    : x(0.0)
    , y(0.0)
    , r(0.0)
    , mode(false)  {
    }
  SensorPoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , r(0.0)
    , mode(false)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _r_type;
  _r_type r;

   typedef uint8_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> const> ConstPtr;

}; // struct SensorPoint_

typedef ::kkanbu_msgs::SensorPoint_<std::allocator<void> > SensorPoint;

typedef boost::shared_ptr< ::kkanbu_msgs::SensorPoint > SensorPointPtr;
typedef boost::shared_ptr< ::kkanbu_msgs::SensorPoint const> SensorPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kkanbu_msgs::SensorPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kkanbu_msgs::SensorPoint_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::SensorPoint_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.r == rhs.r &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kkanbu_msgs::SensorPoint_<ContainerAllocator1> & lhs, const ::kkanbu_msgs::SensorPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kkanbu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37283248e3bfbd787f4ded58467d8ace";
  }

  static const char* value(const ::kkanbu_msgs::SensorPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37283248e3bfbd78ULL;
  static const uint64_t static_value2 = 0x7f4ded58467d8aceULL;
};

template<class ContainerAllocator>
struct DataType< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kkanbu_msgs/SensorPoint";
  }

  static const char* value(const ::kkanbu_msgs::SensorPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 r\n"
"bool mode\n"
;
  }

  static const char* value(const ::kkanbu_msgs::SensorPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.r);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kkanbu_msgs::SensorPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kkanbu_msgs::SensorPoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KKANBU_MSGS_MESSAGE_SENSORPOINT_H
